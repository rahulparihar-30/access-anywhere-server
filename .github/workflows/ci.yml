name: File Transfer Optimization CI

on:
  push:
    branches: [ main, develop, 'feature/*' ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11']

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov

    - name: Run unit tests
      run: |
        python -m pytest test_file_transfer_utils.py -v --cov=file_transfer_utils --cov-report=xml --cov-report=term

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  lint:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pylint black isort

    - name: Run flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=120 --statistics

    - name: Check code formatting with black
      run: |
        black --check --diff .

    - name: Check import sorting with isort
      run: |
        isort --check-only --diff .

  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety

    - name: Run bandit security scan
      run: |
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . || true

    - name: Check dependencies for vulnerabilities
      run: |
        safety check --json || true

  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Verify Python syntax
      run: |
        python -m py_compile main.py file_transfer_utils.py config.py example_client.py

    - name: Check configuration validation
      run: |
        python -c "import config; errors = config.validate_config(); assert len(errors) == 0, f'Config validation failed: {errors}'"

    - name: Test file transfer utilities import
      run: |
        python -c "import file_transfer_utils; print('File transfer utilities loaded successfully')"

  performance:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run compression benchmarks
      run: |
        python -c "
        import file_transfer_utils as ftu
        import tempfile
        import os
        import time

        # Create test file
        test_file = tempfile.NamedTemporaryFile(delete=False, suffix='.txt')
        test_data = b'Test data for compression ' * 10000
        test_file.write(test_data)
        test_file.close()

        # Test compression
        compressed_file = test_file.name + '.gz'
        start = time.time()
        compressed_size = ftu.compress_file(test_file.name, compressed_file)
        duration = time.time() - start

        ratio = compressed_size / len(test_data)
        print(f'Compression: {len(test_data)} -> {compressed_size} bytes ({ratio:.2%})')
        print(f'Duration: {duration:.3f}s')
        print(f'Speed: {len(test_data) / duration / (1024*1024):.2f} MB/s')

        # Cleanup
        os.unlink(test_file.name)
        os.unlink(compressed_file)
        "

  build:
    name: Build Check
    runs-on: ubuntu-latest
    needs: [test, lint, security]

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Verify all imports
      run: |
        python -c "
        import main
        import file_transfer_utils
        import config
        print('All imports successful')
        "

    - name: Create deployment artifact
      run: |
        mkdir -p dist
        cp *.py dist/
        cp requirements.txt dist/
        cp -r templates dist/
        cp -r cert dist/ || true
        tar -czf dist/access-anywhere-server.tar.gz dist/

    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: access-anywhere-server
        path: dist/access-anywhere-server.tar.gz
        retention-days: 7

  notify:
    name: Notify Status
    runs-on: ubuntu-latest
    needs: [test, lint, security, integration, performance, build]
    if: always()

    steps:
    - name: Check job status
      run: |
        echo "Test: ${{ needs.test.result }}"
        echo "Lint: ${{ needs.lint.result }}"
        echo "Security: ${{ needs.security.result }}"
        echo "Integration: ${{ needs.integration.result }}"
        echo "Performance: ${{ needs.performance.result }}"
        echo "Build: ${{ needs.build.result }}"
